<?php

/**
 * Implements hook_entity_info_alter().
 */
function entityreference_view_widget_entity_info_alter(&$info) {
  foreach ($info as $entity_type => $data) {
    $info[$entity_type]['view modes']['entityreference_view_widget'] = array(
      'label' => t('Entity Reference View Widget'),
      'custom settings' => TRUE,
    );
  }
}

/**
 * Implements hook_views_data_alter().
 */
function entityreference_view_widget_views_data_alter(&$data) {
  foreach (entity_get_info() as $entity_type => $info) {
    if (isset($info['base table']) && isset($data[$info['base table']]['table'])) {
      $data[$info['base table']]['entityreference_view_widget'] = array(
        'title' => $data[$info['base table']]['table']['group'],
        'group' => t('Entity Reference View Widget Checkbox'),
        'help' => t('Provide a checkbox to select the row for an entity reference.'),
        'real field' => $info['entity keys']['id'],
        'field' => array(
          'handler' => 'entityreference_view_widget_handler_field_checkbox',
          'click sortable' => FALSE,
        ),
      );
    }
  }
}

/**
 * Implements hook_menu().
 */
function entityreference_view_widget_menu() {
  $items['entityreference_view_widget/%ctools_js/modal/%/%/%'] = array(
    'title' => t('Entity reference view widget modal'),
    'page callback' => 'entityreference_view_widget_modal',
    'page arguments'   => array(1,3,4,5),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['entityreference_view_widget/ajax'] = array(
    'page callback' => 'entityreference_view_widget_ajax',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_views_api().
 */
function entityreference_view_widget_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'entityreference_view_widget') . '/views',
  );
}

/**
 * Implements hook_field_widget_info().
 */
function entityreference_view_widget_field_widget_info() {
  $widgets['entityreference_view_widget'] = array(
    'label' => t('View'),
    'description' => t('An advanced, view-based widget.'),
    'field types' => array('entityreference'),
    'behaviors' => array(
      'default value' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );

  return $widgets;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function entityreference_view_widget_field_widget_settings_form($field, $instance) {
  // Only fields with unlimited cardinality are supported at the moment.
  if ($field['cardinality'] != FIELD_CARDINALITY_UNLIMITED) {
    drupal_set_message(t("The selected widget only supports fields with 'Number of values' set to 'Unlimited'. Otherwise it won't get displayed on the entity form."), 'warning');
  }

  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $target_type = $field['settings']['target_type'];
  $info = entity_get_info($target_type);
  $target_base_table = $info['base table'];

  if ($widget['type'] == 'entityreference_view_widget') {
    // Get a list of all views that contain a "Entityreference View Widget" display.
    $options = array();
    $displays = views_get_applicable_views('entityreference view display');
    foreach ($displays as $data) {
      list($view, $display_id) = $data;
      $view_name = !empty($view->human_name) ? $view->human_name : $view->name;
      $options[$view->name . '|' . $display_id] = check_plain($view_name . ' | ' . $view->display_handler->display->display_title);
    }

    $element['view'] = array(
      '#type' => 'select',
      '#title' => t('View'),
      '#description' => t('Specify the View to use for selecting items. Only views that have an "Entityreference View Widget" display are shown.'),
      '#options' => $options,
      '#default_value' => $settings['view'],
      '#required' => TRUE,
    );
    $element['pass_argument'] = array(
      '#type' => 'checkbox',
      '#title' => t('Pass selected entity ids to View'),
      '#description' => t('If enabled, the View will get all selected entity ids as the first argument. Useful for excluding already selected items.'),
      '#default_value' => $settings['pass_argument'],
    );
  }

  return $element;
}

/**
 * Implements hook_field_widget_form().
 */
function entityreference_view_widget_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $entity_type = $instance['entity_type'];
  $entity = isset($element['#entity']) ? $element['#entity'] : NULL;
  $handler = entityreference_get_selection_handler($field, $instance, $entity_type, $entity);
dsm($field);
  $entity_ids = array();
  $entity_labels = array();

  ctools_include('ajax');
  ctools_include('modal');
  ctools_include('plugins');
  ctools_modal_add_js();

  drupal_add_js(drupal_get_path('module', 'entityreference_view_widget') . '/entityreference_view_widget.js');

  $target_view = explode('|', $instance['widget']['settings']['view']);

  $frontend_id = str_replace('_', '-', $field['field_name']);
  $checkbox_id = 'edit-' . $frontend_id . '-' . $langcode . '-' . $delta . '-target-id';

  if (isset($items[$delta])) {
    $entities = entity_load($field['settings']['target_type'], $items[$delta]);
    $label = $handler->getLabel(current($entities));
  } else {
    $label = '';
  }

  $settings = array(
    'langcode' => $langcode,
    'table_id' => $frontend_id . '-values',
    'target_type' => $field['settings']['target_type'],
  );

  $form[$field['field_name'] . '_settings'] = array(
    '#type' => 'hidden',
    '#default_value' => json_encode($settings),
    '#weight' => 100,
    '#attributes' => array(
  	  'id' => 'entityreference-view-widget-' . $frontend_id . '-settings',
    ),
  );

  if ($items) {
    $element += array(
      '#type' => 'checkbox',
      '#field_suffix' => '<label class="option" for="' . $checkbox_id . '">' . $label . '</label>',
      '#return_value' => isset($items[$delta]) ? $items[$delta]['target_id'] : '',
      '#title_display' => 'after',
      '#element_validate' => array('entityreference_view_widget_validate'),
      '#attributes' => array(
        'checked' => 'checked',
      ),
    );
  }

  if (!$items || isset($items[$delta])) {
    return array('target_id' => $element);
  }
}

/**
 * Implements hook_form_alter().
 */
function entityreference_view_widget_form_alter(&$form, &$form_state, $form_id) {
  foreach (entityreference_view_widget_using_fields() as $field_name) {
    if (isset($form[$field_name])) {
      $langcode = $form[$field_name]['#language'];
      $target_view = explode('|', $form_state['field'][$field_name][$langcode]['instance']['widget']['settings']['view']);

      // Replace with a custom "Add items" button.
      $form[$field_name][$langcode]['add_more'] = array(
        '#markup' => ctools_modal_text_button(t('Add items'), 'entityreference_view_widget/nojs/modal/' . $target_view[0] . '/' . $target_view[1] . '/' . $field_name, '', 'button'),
      );
    }
  }
}

function entityreference_view_widget_validate($element, &$form_state) {
  dsm($element);
  dsm($form_state);
}

function entityreference_view_widget_modal($mode, $name, $display, $field_name) {
  ctools_include('modal');
  ctools_include('ajax');

  $output['form'] = array(
    'command' => 'modal_display',
    'title' => t('Entity reference view widget form'),
    'output' => entityreference_view_widget_modal_view($name, $display),
  );

  $output['form']['output'] .= '<input type="button" class="form-submit" id="entityreference-view-widget-modal-submit" value="' . t('Add selected items') . '"/>';
  $output['form']['output'] .= '<input type="hidden" name="field_name" id="entityreference-view-widget-field-name" value="' . $field_name . '"/>';

  print ajax_render($output);
}

function entityreference_view_widget_modal_view($name, $display) {
  $view = views_get_view($name);
  return $view->preview();
}

/**
 * Ajax callback to transform selected entity IDs into field rows.
 */
function entityreference_view_widget_ajax() {
  $post = $_POST;
  $entity_ids = array_unique($post['entity_ids']);
  $weights = array();

  for ($i = 0; $i <= count($entity_ids); $i++) {
    $weights[$i] = $i;
    if ($i) {
      $weights[-$i] = -$i;
    }
  }

  ksort($weights);

  $items = array(
  	'#theme' => 'field_multiple_value_form',
  	'#field_name' => $post['field_name'],
  	'#after_build' => array('field_form_element_after_build'),
    '#language' => $post['langcode'],
    '#title' => 'Entity reference view test',
    '#cardinality' => -1,
    '#description' => '',
    '#tree' => TRUE,
  );

  foreach ($entity_ids as $delta => $entity_id) {
    $frontend_id = str_replace('_', '-', $post['field_name'] . '-' . $post['langcode'] . '-' . $delta);
    $entities = entity_load($post['target_type'], array($entity_id));
    $label = entity_label($post['target_type'], current($entities));

    $items[$delta] = array(
      'target_id' => array(
        '#type' => 'checkbox',
        '#weight' => $delta,
        '#delta' => $delta,
        '#field_suffix' => '<label class="option" for="' . $frontend_id . '">' . $label . '</label>',
        '#return_value' => $entity_id,
        '#title_display' => 'after',
        '#element_validate' => array('entityreference_view_widget_validate'),
        '#attributes' => array(
          'checked' => 'checked',
        ),
      ),
      '_weight' => array(
        '#type' => 'select',
        '#options' => $weights,
        '#title' => t('Weight'),
        '#value' => $delta,
        '#title_display' => 'invisible',
        '#name' => $post['field_name'] . '[' . $post['langcode'] . '][' . $delta . '][_weight]',
      ),
    );
  }

  $widget = array(
  	'#type' => 'container',
    '#tree' => TRUE,
    '#access' => TRUE,
    '#language' => $post['langcode'],
    '#attributes' => array(
      'class' => array('field-type-entityreference', 'field-name-field-entity-reference-view-test', 'field-widget-entityreference-view-widget'),
    ),
  );

  $widget[$post['langcode']] = $items;

  if (!empty($post['entity_ids'])) {
    print render($widget);
  }
}

/**
 * Grabs field names from DB and checks if they are using this widget.
 */
function entityreference_view_widget_using_fields() {
  $query = db_select('field_config', 'fc');
  $query->leftJoin('field_config_instance', 'fci', 'fci.field_id = fc.id');

  $query->fields('fci', array('field_name', 'data'))
  ->condition('fc.type', 'entityreference', '=')
  ->condition('fc.active', 1, '=');

  $results = array();

  foreach ($query->execute()->fetchAll() as $result) {
    $data = unserialize($result->data);
    if ($data['widget']['type'] == 'entityreference_view_widget') {
      $results[] = $result->field_name;
    }
  }

  return $results;
}

function entityreference_view_widget_object_to_array($obj) {
  if(is_object($obj)) $obj = (array)$obj;
  if(is_array($obj)) {
    $new = array();
    foreach($obj as $key => $val) {
      $new[$key] = entityreference_view_widget_object_to_array($val);
    }
  }
  else $new = $obj;
  return $new;
}